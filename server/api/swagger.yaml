swagger: '2.0'
info:
  description: This Api returns you all you need for your party or dinner
  version: "Ricky"
  title: Get Together
  # put the contact info for your development or API team
  #contacts:
  #- email1: michela.capasso@icloud.com 
  #- email2: cermaria.f@gmail.com 
  #- email3: riccardo.casciotti@gmail.com

paths:
  /beers:
    get:
      summary: returns a list of beers 
      description: |
        By passing in the appropriate options, you can search for beers matched by food, a minimum or a maximum alcohol percentage ,
      produces:
      - application/json
      
      parameters:
      - in: query
        name: food
        description: food that beers to return are matching to
        required: false
        type: string
      - in: query
        name: abv_lt
        description: minimum alcohol percentage  of beers percentage 
        required: false
        type: number
        minimum: 0.0
      - in: query
        name: abv_gt
        description: maximum alcohol percentage  of beers to return
        type: number
        minimum: 0.0
      - in: query
        name: beer_name
        description: style or name of beers to return
        type: string
      - in: query
        name: number
        description: the number of results to return.
        required: false
        type: integer
        format: int32
        minimum: 0
        maximum: 20
        
      responses:
        200:
          description: the request was successful
        400:
          description:  bad request
  
  /beers/random:
    get:
      summary: returns 3 random beers;
      produces:
      - application/json
      
      parameters:
      - in: query
        name: number
        description: the number of random beers to return.
        required: false
        type: integer
        minimum: 0
        maximum: 20
    
      responses:
        200:
          description: the request was successful
        400:
          description:  bad request
          
  /recipes:
    get:
      summary: returns a list of recipes
      description: |
        By passing in the appropriate options, you can search for beers matched by food, a minimum or a maximum alcohol percentage
      produces:
      - application/json
      
      parameters:
      - in: query
        name: query
        description: the (natural language) recipe search query.
        required: false
        type: string
      - in: query
        name: cusines
        description: the cuisine(s) of the recipes. One or more comma separated.
        required: false
        type: string
      - in: query
        name: intolerances
        description: a comma-separated list of intolerance
        required: false
        type: string
      - in: query
        name: number
        description: the number of results to return.
        required: false
        type: integer
        format: int32
        minimum: 0
        maximum: 20
        
      responses:
        200:
          description: the request was successful
        400:
          description: bad request
          
  /recipes/random:
    get:
      summary: returns a list of random recipes
      description: |
        By passing in the appropriate options, you can get random recipes
      produces:
      - application/json
      
      parameters:
      - in: query
        name: number
        description: The number of results to return.
        required: false
        type: integer
        format: int32
        minimum: 0
        maximum: 20  
        
      responses:
        200:
          description: the request was successful
        400:
          description: bad request
          
  /wines/pairing:
    get:
      summary: returns a list of wines matching with food
      description: |
        By passing in the appropriate options, you can get random wines matching with food
      produces:
      - application/json
      
      parameters:
      - in: query
        name: food
        description: the food with which the wines to return must combine
        required: true
        type: string
        
      responses:
        200:
          description: the request was successful
        400:
          description: bad request
          
  /cocktails/category:
    get:
      summary: returns a list of cocktails in a category
      description: |
        By passing in the appropriate options, you can search for cocktails matched by category
      produces:
      - application/json
      
      parameters:
      - in: cocktail_category
        name: cocktail_category
        description: pass a category of cocktails to be returned
        required: true
        type: string
        format: uuid
      - in: cocktail_number
        name: cocktail_number
        description: pass a number of cocktails to be returned
        required: true
        type: integer
        format: int32
        maximum: 20 
        minimum: 1
        
      responses:
        200:
          description: the request was successful
        400:
          description: bad request
      
  /cocktails/name:
    get:
      summary: returns a given cocktail
      description: |
        You can search for cocktails matched by name
      produces:
      - application/json
      parameters:
      
      - in: cocktail_name
        name: cocktail_name
        description: pass the name of the cocktail to be returned
        required: true
        type: string
      - in: cocktail_number
        name: cocktail_number
        description: pass a number of cocktails to be returned
        required: true
        type: integer
        format: int32
        maximum: 20 
        minimum: 1
  
      responses:
        200:
          description: the request was successful
        400:
          description: bad request
        

  /cocktails/type:
    get:
      summary: returns a list of random cocktails with type Cocktail_type
      description: |
        You can search for cocktails matched by type

      produces:
      - application/json
      
      parameters:
      - in: cocktail_type
        name: cocktail_type
        description: pass the type of the cocktail to be returned
        required: true
        type: string
        format: uuid
      - in: cocktail_number
        name: cocktail_number
        description: pass a number of cocktails to be returned
        required: true
        type: integer
        format: int32
        maximum: 20 
        minimum: 1
  
      responses:
        200:
          description: the request was successful
        400:
          description: bad request
      

  /cocktails/mainIngredient:
    get:
      summary: returns a given cocktail
      description: | 
        You can search for cocktails matched by name 

      produces:
      - application/json
      
      parameters:
      - in: cocktail_mainIngredient
        name: cocktail_mainIngredient
        description: pass the name of the main ingredient in the cocktails to be returned
        required: true
        type: string
        format: uuid
      - in: cocktail_number
        name: cocktail_number
        description: pass a number of cocktails to be returned
        required: true
        type: integer
        format: int32
        maximum: 20 
        minimum: 1
      
    responses:
      200:
        description: the request was successful
      400:
        description: bad request
          

    
# definitions:
#  InventoryItem:
#    type: object
#    required:
#      - id
#      - name
#      - manufacturer
#      - releaseDate
#    properties:
#      id:
#        type: string
#        format: uuid
#        example: d290f1ee-6c54-4b01-90e6-d701748f0851
#      name:
#        type: string
#        example: Widget Adapter
#      releaseDate:
#        type: string
#        format: date-time
#        example: 2020-06-01T09:12:30.000Z
#     manufacturer:
#        $ref: '#/definitions/Manufacturer'
#  Manufacturer:
#    required:
#    - name
#    properties:
#      name:
#        type: string
#        example: ACME Corporation
#      homePage:
#        type: string        format: url
#        example:  https://www.acme-corp.com
#      phone:
#        type: string
#        example: 408-867-5309
# Added by API Auto Mocking Plugin
#host: virtserver.swaggerhub.com
#basePath: /get_togheter/get_together_API/1.0.0
#schemes:
# - https